系统设计和架构设计
需求整理
前端
    交互效果
    用户登陆和退出
    每天抽奖次数限制
    获奖提示和中奖列表

后端
    奖品列表
    抽奖
    中奖列表
    安全抽奖，奖品不能超发，也不能不均衡

后台管理
    奖品，优惠券，用户，黑名单，中奖记录
    实时更新奖品信息，更新奖品库存，奖品中奖周期
    后台定时任务，生成发奖池，填充奖品

用户操作和业务流程
            登陆
抽奖页面--中奖列表--中奖记录，剩余抽奖次数
   参数验证  抽奖  中奖
   中奖记录  发奖  中奖提示

奖品状态变化
正常奖品 有效期 奖品池 奖品库存

抽奖业务流程
抽奖-->验证-->锁定用户-->（避免重复抽奖，使用分布式锁）-->验证用户今日参与次数-->验证ip今日最大限制次数-->验证ip今日抽奖次数-->
验证ip黑名单-->验证用户黑名单-->获得抽奖编码-->匹配奖品-->验证奖品库存-->发奖-->更新奖品库存

数据库设计
表设计
奖品
优惠券
中奖记录
用户黑名单
ip黑名单（可能会误杀，比如一个公司只有一个出口IP） 这里的黑名单只是限制不能中实物奖品，给优惠券无伤大雅
用户今日参与次数

缓存设计
目标：减少数据库的依赖，提高系统性能
原则：平衡系统性能，开发时间，复杂度
方向：数据读多写少，数据量有限，数据分散

使用redis缓存的地方
1。奖品 数量少，更新频率低，查询多。最佳的全量缓存对象。
如果有修改的话，就要更新缓存。
2。优惠券 一次性导入，优惠券适合用set集合
3。中奖记录 只缓存最新的大奖记录，最新的实物奖品记录
4。用户黑名单，ip黑名单，也是读多，写少
5。用户每日参与次数

系统架构设计
架构设计基本都类似
架构是方案，不只是一个结果，而要有很多的对比权衡。为什么选择这样的架构，而不是其他的方案。

网络架构图
最外层用户网络层 通过4G或者wifi访问，这是用户层
然后到服务端第一层，lvs或者nginx这类的负载均衡，这是服务端的对外接入层
然后进入应用服务层，一个lvs后面可以挂上10个应用服务。

系统架构图
最下面是存储系统，mysql做持久化存储，redis作为缓存
中间用到一些框架和一些服务，比如iris，xorm框架，redisgo这些客户端组件，thrift这类对rpc框架
上面就是一些接口，抽奖，中奖记录，活动奖品 还有一些后台的接口

一般的架构就是这样，再复杂一点就用到一些消息队列，把服务剥离，比如图片服务，存储服务，登陆服务等等。

总结：
需要出发点：充分考虑运营的需求，同时用户操作尽量简单
数据库设计：定义模型，简单够用，留下扩展空间
架构设计：分层架构设计，
网络：负载均衡层/引用层/存储层；
应用：业务代码/框架代码/存储服务；


公共的目录：
bootstrap：应用启动内容（日志相关，模版相关，权限相关处理以及控制器）
comm：提供公共的函数
conf：配置文件
dao：操作数据库

web目录：
controller，public，views

dao层是面向数据库的
service是面向数据服务的（可以调用dao代码，也可以调用缓存代码，或者其他第三方代码）

dao/service基础方法
get getall，countall，search，delete，update，create








































